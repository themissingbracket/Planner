#!/bin/sh

# Source: https://gist.github.com/waylan/4080362

BASE_COMMAND_NAME="planner"
DOCKER_SERVICE_NAME="planner"
DOCKER_SYNC_CONTAINER_NAME="planner-sync"
OUTPUT_LOG_DIR="tmp"
OUTPUT_LOG_FILE="${OUTPUT_LOG_DIR}/output.log"
GOTO_LOGS_MSG="See ${OUTPUT_LOG_FILE} for error"

add_date() {
	while IFS= read -r line; do
		printf '%s %s\n' "$(date)" "$line"
	done
}

get_is_planner_container_running() {
	if [ -z "$(docker-compose ps | grep Up)" ]; then
		return 1
	else
		return 0
	fi
}

get_is_docker_sync_running() {
	if [ -z $(docker ps -q -a --no-trunc --filter status=running --filter name=${DOCKER_SYNC_CONTAINER_NAME}) ]; then
		return 1
	else
		return 0
	fi
}

get_is_planner_container_built() {
	if [ -z $(docker-compose ps -q ${DOCKER_SERVICE_NAME}) ] || [ -z $(docker ps -q --no-trunc -a | grep $(docker-compose ps -q ${DOCKER_SERVICE_NAME})) ]; then
		return 1
	else
		return 0
	fi
}

get_table_row_cell() {
	printf '%-20s' "${1}"
}

output_as_table_row() {
	all_cells=""

	for x in $(seq 1 $#); do
		result=$(get_table_row_cell "${!x}")
		all_cells="${all_cells}${result}"
	done

	printf '%-40s' "${all_cells}"
	echo ''
}

sub_status() {
	result=""

	if get_is_planner_container_running; then
		result="Running"
	else
		if get_is_planner_container_built; then
			result="Stopped (built)"
		else
			result="Stopped (unbuilt)"
		fi
	fi

	output_as_table_row "Docker" "${result}"

	result=""

	if get_is_docker_sync_running; then
		result="Running"
	else
		result="Stopped"
	fi

	output_as_table_row "Docker Sync" "${result}"
}

sub_help() {
	echo "\nUsage: ${BASE_COMMAND_NAME} <subcommand>\n"
	echo "Subcommands:"
	echo "  status    Reports on the status of the Docker container and Docker Sync."
	echo "  start     Builds the Docker container (if needed), runs it and starts Docker Sync."
	echo "  connect   Logs into the Docker container."
	echo "  go        Shortcut for start and connect."
	echo "  stop      Stops the Docker container. Does not destroy it."
	echo "  destroy   Removes the Docker container (requires you to re-build)."
	echo "  exec      Executes a command inside the container. eg. running NPM commands"
	echo "  resync    Restarts Docker Sync to resolve sync problems."
	echo "  prune     Prunes Docker and cleans Docker Sync. Prompts to confirm.\n"
}

sub_start() {
	ERROR_MSG="Failed to start Planner. Is it already running (Planner status)?"

	echo "Starting Planner..."

	if get_is_planner_container_running; then
		echo "Failed to start Planner as it is already running."
		exit 1
	fi

	if get_is_planner_container_built; then
		echo "Already built"
	else
		echo "Building Docker (this could take around 5 minutes)..."

		{ docker-compose up -d --build | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo $ERROR_MSG
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi
	fi

	{ docker-sync start | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

	last_status=$?

	if [ $last_status -ne 0 ]; then
		echo $ERROR_MSG
		echo $GOTO_LOGS_MSG
		exit $last_status
	fi

	{ docker-compose up -d | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

	last_status=$?

	if [ $last_status -ne 0 ]; then
		echo $ERROR_MSG
		echo $GOTO_LOGS_MSG
		exit $last_status
	fi

	echo "Planner has been started successfully. You can now connect to it (Planner connect)."
}

sub_connect() {
	ERROR_MSG="Failed to connect to Planner. Are you sure the container is running (Planner start)?"

	echo "Connecting to Planner..."

	# docker-compose exec $DOCKER_SERVICE_NAME bash
	docker-compose exec $DOCKER_SERVICE_NAME bash 3>&1 1>&2 2>&3 | add_date >>${OUTPUT_LOG_FILE}

	last_status=$?

	if [ $last_status -ne 0 ]; then
		echo $ERROR_MSG
		echo $GOTO_LOGS_MSG
		exit $last_status
	fi
}

sub_go() {
	sub_start
	sub_connect
}

sub_stop() {
	ERROR_MSG="Failed to stop Planner. Are you sure the container is running (Planner status)?"

	echo "Stopping Planner (this could take 30 seconds)..."

	if get_is_planner_container_running; then
		{ docker-compose stop | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo $ERROR_MSG
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi

		{ docker-sync stop | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo $ERROR_MSG
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi

		echo "Planner has been stopped."
	else
		echo $ERROR_MSG
		exit 1
	fi
}

sub_destroy() {
	ERROR_MSG="Failed to destroy Planner. Maybe it has already been destroyed?"

	echo "Destroying Planner..."

	if get_is_planner_container_built; then
		{ docker-sync stop | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo $ERROR_MSG
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi

		{ docker-compose down | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo $ERROR_MSG
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi

		echo "Successfully destroyed the Docker container and stopped syncing."
	else
		echo "Failed to destroy Planner. It has not been built."
		exit 1
	fi
}

sub_exec() {
	ERROR_MSG="Failed to execute command in Planner. Is the container running (Planner status)?"

	command=""

	for i; do
		if [ "${command}" ]; then
			command="${command} "
		fi
		command="${command}${i}"
	done

	echo "Executing command \"${command}\" in Planner..."

	docker-compose exec Planner $command 3>&1 1>&2 2>&3 | add_date >>${OUTPUT_LOG_FILE}

	last_status=$?

	if [ $last_status -ne 0 ]; then
		echo $ERROR_MSG
		echo $GOTO_LOGS_MSG
		exit $last_status
	fi

	echo "Done"
}

sub_resync() {
	ERROR_MSG="Failed to restart Docker Sync."

	echo "Restarting Docker Sync to fix sync problems..."

	{ docker-sync stop | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

	last_status=$?

	if [ $last_status -ne 0 ]; then
		echo "Failed to stop Docker Sync. You might need to restart your computer."
		echo $GOTO_LOGS_MSG
		exit $last_status
	fi

	{ docker-sync start | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

	last_status=$?

	if [ $last_status -ne 0 ]; then
		echo "Failed to start Docker Sync. You might need to restart your computer."
		echo $GOTO_LOGS_MSG
		exit $last_status
	fi

	echo "Docker Sync has been restarted."
}

sub_prune() {
	echo "This will delete any stopped Docker containers, all unused networks, dangling images and caches."
	echo "If Planner has stopped ('Planner stop') the container will be deleted."
	echo "It also deletes the Docker Sync containers used by Planner."
	echo "You will definitely need to run 'Planner start' again after this.\n"
	read -p "Are you sure? (y/n) " choice

	case "$choice" in
	y | Y)
		echo "Pruning Docker and Docker Sync..."

		{ docker system prune -f | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo "Failed to prune Docker."
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi

		{ docker-sync clean | add_date >>${OUTPUT_LOG_FILE}; } 2>&1 | add_date >>${OUTPUT_LOG_FILE}

		last_status=$?

		if [ $last_status -ne 0 ]; then
			echo "Failed to clean Docker Sync."
			echo $GOTO_LOGS_MSG
			exit $last_status
		fi

		echo "Docker and Docker Sync have been pruned successfully. You will need to run 'Planner start' to rebuild everything."
		;;
	n | N)
		echo "Prune cancelled."
		;;
	*)
		echo "Invalid input. Prune cancelled."
		;;
	esac
}

# Turn on catching any non-success error code in pipes
shopt -s -o pipefail

# Piping to files in directories that do not exist causes errors
if [ ! -d ${OUTPUT_LOG_DIR} ]; then
	mkdir ${OUTPUT_LOG_DIR}
fi

subcommand=$1

first=1
additionalargs=""

for i; do
	if [ "$first" ]; then
		first=
		continue
	fi
	additionalargs="${additionalargs} ${i}"
done

case $subcommand in
"" | "-h" | "--help")
	sub_help
	;;
*)
	shift
	sub_${subcommand} $additionalargs
	if [ $? = 127 ]; then
		echo "Error: '$subcommand' is not a known subcommand." >&2
		echo "       Run '$BASE_COMMAND_NAME --help' for a list of known subcommands." >&2
		exit 1
	fi
	;;
esac
